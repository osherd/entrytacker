name: entrytracker cicd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: get commit version from main branch
      #   id: get_commit_version
      #   run: |
      #     commit_version=$(git rev-parse --short HEAD)
      #     echo "Commit version: $commit_version"
      #     echo "::set-output name=commit_version::$commit_version"

      - name: Get the latest tag from the repository and increment patch version
        id: increment_version
        run: |
          # Fetch tags from the main branch
          git fetch --tags
          # Get the latest tag (sorted to get the most recent version)
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)
          # If no tags are found, set the version to 1.0.0
           if [ -z "$latest_tag" ]; then
          new_tag="v1.0.0"
          else
          # Extract major, minor, patch from the latest tag
          major=$(echo $latest_tag | cut -d '.' -f 1 | sed 's/v//')  # Remove 'v' if present
          minor=$(echo $latest_tag | cut -d '.' -f 2)
          patch=$(echo $latest_tag | cut -d '.' -f 3)
          # Increment the patch number by 1
          patch=$((patch + 1))
          # Form the new tag
          new_tag="${major}.${minor}.${patch}"
          fi
          echo "New version tag: $new_tag"
          # Set the new version as output for later use
          echo "::set-output name=new_tag::$new_tag"
      # - name: increment the new_tag by 1
      #   run: echo ${{ steps.increment_version.outputs.new_tag }}

      - name: Set up python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      #Run the application (outside of a container)
      - name: Run the application on port 5000 in the background
        run: |
          nohup python app.py &
      - name: Run tests
        run: |
          curl http://localhost:5000

      - name: install docker and docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Package the application
      - name: Build Docker image using new_tag output
        run: docker build -t entry-tracker:${{ steps.increment_version.outputs.new_tag }} .

      - name: Create a new tag
        run: git tag -a ${{ steps.increment_version.outputs.new_tag }} -m "version ${{ steps.increment_version.outputs.new_tag }}"
      - name: Push the new tag to the repository
        run: git push origin ${{ steps.increment_version.outputs.new_tag }}

      # - name: get latest build version of the image
      # run: docker images | grep entry-tracker
      # - name: increament only minor version of the image by 1
      #   run: echo $(( ${{ steps.increment_version.outputs.new_tag }} + 1 ))

      # run: echo $(( ${{ steps.increment_version.outputs.new_tag }} + 1 ))
      # - name: increment the version of the image
      #   run: echo $(( ${{ steps.increment_version.outputs.new_tag }} + 1 ))

      # Find the process using port 5000 and kill it
      - name: Kill the process using port 5000
        run: |
          sudo lsof -t -i:5000 | xargs kill -9

      - name: Run the application in the background
        run: |
          docker-compose up -d
      - name: Run curl tests
        run: |
          sleep 5
          curl http://localhost:5000

      # Push the artifact to AWS ECR registry

      # step 1: Configure AWS credentials
      - name: configure aws credentials
        run: aws configure set aws_access_key_id ${{ secrets.ECR_ACCESS_KEY }} && aws configure set aws_secret_access_key ${{ secrets.ECR_SECRET_KEY }} && aws configure set region ${{ secrets.AWS_REGION }}

      # step 2: Authenticate Docker to AWS ECR registry
      - name: Authenticate Docker to AWS ECR
        run: aws ecr get-login-password --region ${{secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com

      # step 3: Tag Docker image using new_tag output
      - name: Tag Docker image using new_tag output
        run: docker tag entry-tracker:${{ steps.increment_version.outputs.new_tag }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod/entry-tracker:${{ steps.increment_version.outputs.new_tag }}

      # step 4: Push Docker image to ECR
      - name: Push Docker image to ECR registry using new_tag output
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod/entry-tracker:${{ steps.increment_version.outputs.new_tag }}
        # run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod/entry-tracker:latest

      # step 5: Connect  to EC2 enstance and update the running container
      - name: Connect to EC2 instance and update the running container with latest version of the image
        run: |
          chmod 400 ${{ secrets.EC2_PRIVATE_KEY }}
          ssh -i ${{ secrets.EC2_PRIVATE_KEY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod/entry-tracker:latest
          docker-compose down
          docker-compose up -d
        # run: |
        #   chmod 400 ${{ secrets.EC2_PRIVATE_KEY }}
        #   ssh -i ${{ secrets.EC2_PRIVATE_KEY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}
        #   docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod/entry-tracker:latest
        #   docker-compose down
        #   docker-compose up -d

      # - name:  Deploy to EC2 and  Update the running container
      #   run: |
      #     chmod 400 ${{ secrets.EC2_PRIVATE_KEY }}
      #     ssh -i ${{ secrets.EC2_PRIVATE_KEY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}
      #     docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod/entry-tracker:latest
      #     docker-compose down
      #     docker-compose up -d
